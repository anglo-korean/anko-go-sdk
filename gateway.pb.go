// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: gateway.proto

package anko

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Label represents the price change forecast
type Label int32

const (
	Label_unknown Label = 0
	Label_down    Label = 1
	Label_up1_5   Label = 2
	Label_up2     Label = 3
	Label_up2_5   Label = 4
	Label_up3     Label = 5
	Label_up3_5   Label = 6
	Label_up4     Label = 7
	Label_higher  Label = 8
)

// Enum value maps for Label.
var (
	Label_name = map[int32]string{
		0: "unknown",
		1: "down",
		2: "up1_5",
		3: "up2",
		4: "up2_5",
		5: "up3",
		6: "up3_5",
		7: "up4",
		8: "higher",
	}
	Label_value = map[string]int32{
		"unknown": 0,
		"down":    1,
		"up1_5":   2,
		"up2":     3,
		"up2_5":   4,
		"up3":     5,
		"up3_5":   6,
		"up4":     7,
		"higher":  8,
	}
)

func (x Label) Enum() *Label {
	p := new(Label)
	*p = x
	return p
}

func (x Label) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Label) Descriptor() protoreflect.EnumDescriptor {
	return file_gateway_proto_enumTypes[0].Descriptor()
}

func (Label) Type() protoreflect.EnumType {
	return &file_gateway_proto_enumTypes[0]
}

func (x Label) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Label.Descriptor instead.
func (Label) EnumDescriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{0}
}

// Metadata prvides some simple additional information a request might want
// to include, such as user-agent data, or some key-values for later reporting.
//
// All fields are totally optional, though we would prefer that any clients
// where a token is used across multiple clients, a unique UA is set _per_ client.
// This will help debugging issues.
//
// Tags are useful for reporting.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ua   string `protobuf:"bytes,1,opt,name=ua,proto3" json:"ua,omitempty"`
	Tags []*Tag `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *Metadata) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Tag is a key/value pair, used in reporting.
//
// For instance, a user may wish to know how many client failures occured
// for tag "environment=production", or "version=2.0.0"
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Forecast represents the product of the analysis of a piece of intelligence.
//
// A piece of intelligence is processed through the Anglo Korean pipeline to
// determine the stock market symbol (represented here as a RIC, see:
// https://en.wikipedia.org/wiki/Reuters_Instrument_Code) a piece of intelligence will
// affect, the forecast change as a 'Label' (the definitions of which are described
// in the Label message), and a confidence score for this forecast (as a floating
// point value between 0 and 1, where 0 is a lack of confidence and 1 is complete
// confidence).
//
// For users which do not speak RIC, we also embed our internal representation of a
// symbol, which includes the symbol, the exchange name, and how confident we are
// that this symbol is affected by a piece of intelligence
type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ric    string  `protobuf:"bytes,2,opt,name=ric,proto3" json:"ric,omitempty"`
	Score  float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Symbol *Symbol `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Label  Label   `protobuf:"varint,5,opt,name=label,proto3,enum=Label" json:"label,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *Forecast) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Forecast) GetRic() string {
	if x != nil {
		return x.Ric
	}
	return ""
}

func (x *Forecast) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Forecast) GetSymbol() *Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Forecast) GetLabel() Label {
	if x != nil {
		return x.Label
	}
	return Label_unknown
}

// Symbol holds the raw representation of a symbol within Anglo Korean
// tied to a piece of intelligence.
//
// Symbol and Exchange are pretty self explanatory.
//
// Score and Ratio are used to express how confident we are that we've
// identified the correct symbol from a piece of intellegince; when processing
// data we assign a score to each symbol we derive- if the intelligence references
// a symbol directly then we add n points, if there's a reference to a company
// name or initialism then we add n/2 points, and if there's a reference to
// a corporate office's name we add n/5 points.
//
// Where a score is quite low, or where there are many symbols with the same
// score (like a company on many markets), or where the ratio of this symbol
// to other symbols scores (if our symbol score is less than a third of all the
// scores added together, for instance) then we already discard forecasts.
//
// By passing it here, we allow for clients to fine-tune their own confidence
// scoring if they need to.
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Score    float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Ratio    float64 `protobuf:"fixed64,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Exchange string  `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *Symbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Symbol) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Symbol) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *Symbol) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

var File_gateway_proto protoreflect.FileDescriptor

var file_gateway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x34, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x12, 0x18, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x68, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2a, 0x66, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x70, 0x31, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x75, 0x70, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x70, 0x32, 0x5f, 0x35, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x70, 0x33, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x70,
	0x33, 0x5f, 0x35, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x70, 0x34, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x10, 0x08, 0x32, 0x2f, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x09, 0x2e, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x6c, 0x6f, 0x2d,
	0x6b, 0x6f, 0x72, 0x65, 0x61, 0x6e, 0x2f, 0x61, 0x6e, 0x6b, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73,
	0x64, 0x6b, 0x3b, 0x61, 0x6e, 0x6b, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gateway_proto_rawDescOnce sync.Once
	file_gateway_proto_rawDescData = file_gateway_proto_rawDesc
)

func file_gateway_proto_rawDescGZIP() []byte {
	file_gateway_proto_rawDescOnce.Do(func() {
		file_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gateway_proto_rawDescData)
	})
	return file_gateway_proto_rawDescData
}

var file_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gateway_proto_goTypes = []interface{}{
	(Label)(0),       // 0: Label
	(*Metadata)(nil), // 1: Metadata
	(*Tag)(nil),      // 2: Tag
	(*Forecast)(nil), // 3: Forecast
	(*Symbol)(nil),   // 4: Symbol
}
var file_gateway_proto_depIdxs = []int32{
	2, // 0: Metadata.tags:type_name -> Tag
	4, // 1: Forecast.symbol:type_name -> Symbol
	0, // 2: Forecast.label:type_name -> Label
	1, // 3: Forecasts.Stream:input_type -> Metadata
	3, // 4: Forecasts.Stream:output_type -> Forecast
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gateway_proto_init() }
func file_gateway_proto_init() {
	if File_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gateway_proto_goTypes,
		DependencyIndexes: file_gateway_proto_depIdxs,
		EnumInfos:         file_gateway_proto_enumTypes,
		MessageInfos:      file_gateway_proto_msgTypes,
	}.Build()
	File_gateway_proto = out.File
	file_gateway_proto_rawDesc = nil
	file_gateway_proto_goTypes = nil
	file_gateway_proto_depIdxs = nil
}
