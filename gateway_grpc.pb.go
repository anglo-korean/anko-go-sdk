// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package anko

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForecastsClient is the client API for Forecasts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForecastsClient interface {
	Stream(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (Forecasts_StreamClient, error)
}

type forecastsClient struct {
	cc grpc.ClientConnInterface
}

func NewForecastsClient(cc grpc.ClientConnInterface) ForecastsClient {
	return &forecastsClient{cc}
}

func (c *forecastsClient) Stream(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (Forecasts_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Forecasts_ServiceDesc.Streams[0], "/Forecasts/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &forecastsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Forecasts_StreamClient interface {
	Recv() (*Forecast, error)
	grpc.ClientStream
}

type forecastsStreamClient struct {
	grpc.ClientStream
}

func (x *forecastsStreamClient) Recv() (*Forecast, error) {
	m := new(Forecast)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForecastsServer is the server API for Forecasts service.
// All implementations must embed UnimplementedForecastsServer
// for forward compatibility
type ForecastsServer interface {
	Stream(*Metadata, Forecasts_StreamServer) error
	mustEmbedUnimplementedForecastsServer()
}

// UnimplementedForecastsServer must be embedded to have forward compatible implementations.
type UnimplementedForecastsServer struct {
}

func (UnimplementedForecastsServer) Stream(*Metadata, Forecasts_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedForecastsServer) mustEmbedUnimplementedForecastsServer() {}

// UnsafeForecastsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForecastsServer will
// result in compilation errors.
type UnsafeForecastsServer interface {
	mustEmbedUnimplementedForecastsServer()
}

func RegisterForecastsServer(s grpc.ServiceRegistrar, srv ForecastsServer) {
	s.RegisterService(&Forecasts_ServiceDesc, srv)
}

func _Forecasts_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Metadata)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForecastsServer).Stream(m, &forecastsStreamServer{stream})
}

type Forecasts_StreamServer interface {
	Send(*Forecast) error
	grpc.ServerStream
}

type forecastsStreamServer struct {
	grpc.ServerStream
}

func (x *forecastsStreamServer) Send(m *Forecast) error {
	return x.ServerStream.SendMsg(m)
}

// Forecasts_ServiceDesc is the grpc.ServiceDesc for Forecasts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forecasts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Forecasts",
	HandlerType: (*ForecastsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Forecasts_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
